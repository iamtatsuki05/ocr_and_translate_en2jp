# name: HF → GitHub sync

# # 参考: https://huggingface.co/datasets/John6666/forum1/blob/main/sync_hf_github.md
# # Option 1（推奨）: repository_dispatch により HF の Webhook/リレーから即時同期

# on:
#   repository_dispatch:
#     types: [hf-sync]
#   # 手動トリガー（検証用）
#   workflow_dispatch:

# env:
#   # 既定のHFリポジトリ（client_payload.hf_repo があればそちらが優先）
#   HF_REPO: your-user-or-org/your-hf-repo
#   # main-only / paths の既定ブランチ
#   REF: main

# jobs:
#   mirror_all:
#     if: ${{ github.event.client_payload.mode == 'mirror' || github.event.client_payload.mode == '' || github.event.client_payload.mode == null }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Optionally skip LFS smudge
#         if: ${{ github.event.client_payload.skip_lfs == true }}
#         run: echo "GIT_LFS_SKIP_SMUDGE=1" >> "$GITHUB_ENV"

#       - name: Install git-lfs (only if not skipping)
#         if: ${{ github.event.client_payload.skip_lfs != true }}
#         run: git lfs install

#       - name: Clone HF as mirror
#         run: |
#           set -euo pipefail
#           HF_REPO="${{ github.event.client_payload.hf_repo || env.HF_REPO }}"
#           if [ -n "${{ secrets.HF_TOKEN }}" ]; then
#             git clone --mirror "https://__token__:${{ secrets.HF_TOKEN }}@huggingface.co/${HF_REPO}" /tmp/hf.git
#           else
#             git clone --mirror "https://huggingface.co/${HF_REPO}" /tmp/hf.git
#           fi

#       - name: Push mirror to GitHub
#         run: |
#           set -euo pipefail
#           cd /tmp/hf.git
#           git remote add github "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
#           git push --mirror github
#           if [ "${{ github.event.client_payload.skip_lfs }}" != "true" ]; then
#             git lfs fetch --all || true
#             git lfs push --all github || true
#           fi

#   main_only:
#     if: ${{ github.event.client_payload.mode == 'main' }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Optionally skip LFS smudge
#         if: ${{ github.event.client_payload.skip_lfs == true }}
#         run: echo "GIT_LFS_SKIP_SMUDGE=1" >> "$GITHUB_ENV"

#       - name: Install git-lfs (only if not skipping)
#         if: ${{ github.event.client_payload.skip_lfs != true }}
#         run: git lfs install

#       - name: Checkout GitHub repo
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Add HF remote and fetch branch
#         run: |
#           set -euo pipefail
#           HF_REPO="${{ github.event.client_payload.hf_repo || env.HF_REPO }}"
#           if [ -n "${{ secrets.HF_TOKEN }}" ]; then
#             git remote add hf "https://__token__:${{ secrets.HF_TOKEN }}@huggingface.co/${HF_REPO}"
#           else
#             git remote add hf "https://huggingface.co/${HF_REPO}"
#           fi
#           git fetch hf --tags
#           git checkout -B "${{ env.REF }}" "origin/${{ env.REF }}" || git checkout -B "${{ env.REF }}"
#           git merge --ff-only "hf/${{ env.REF }}" || { echo "Non-ff merge. Refuse to rewrite."; exit 1; }
#           git push origin "${{ env.REF }}" --tags

#   selective_paths:
#     if: ${{ github.event.client_payload.mode == 'paths' }}
#     runs-on: ubuntu-latest
#     env:
#       INCLUDE_PATHS: ""
#     steps:
#       - name: Optionally skip LFS smudge
#         if: ${{ github.event.client_payload.skip_lfs == true }}
#         run: echo "GIT_LFS_SKIP_SMUDGE=1" >> "$GITHUB_ENV"

#       - name: Checkout GitHub repo
#         uses: actions/checkout@v4
#         with:
#           path: gh
#           fetch-depth: 0

#       - name: Sparse clone HF with only requested paths
#         run: |
#           set -euo pipefail
#           HF_REPO="${{ github.event.client_payload.hf_repo || env.HF_REPO }}"
#           REF="${{ env.REF }}"
#           python - <<'PY'
#           import os, json
#           s = os.getenv('INCLUDE_PATHS','').strip()
#           p = os.getenv('GITHUB_EVENT_PATH')
#           payload_paths = []
#           if p and os.path.exists(p):
#               data = json.load(open(p))
#               cp = (data.get('client_payload') or {}).get('paths')
#               if isinstance(cp, list):
#                   payload_paths = [str(x) for x in cp]
#           lines = payload_paths or [ln for ln in s.splitlines() if ln.strip()]
#           open('include.txt','w').write("\n".join(lines))
#           print(open('include.txt').read())
#           PY
#           test -s include.txt || { echo "No paths specified"; exit 1; }
#           if [ -n "${{ secrets.HF_TOKEN }}" ]; then
#             git clone --no-checkout "https://__token__:${{ secrets.HF_TOKEN }}@huggingface.co/${HF_REPO}" hf-src
#           else
#             git clone --no-checkout "https://huggingface.co/${HF_REPO}" hf-src
#           fi
#           cd hf-src
#           git sparse-checkout init --cone
#           xargs -a ../include.txt -I{} git sparse-checkout set {}
#           git checkout "${REF}"

#       - name: Copy selected paths into GitHub repo and commit
#         run: |
#           set -euo pipefail
#           cd "$GITHUB_WORKSPACE"
#           while IFS= read -r p; do
#             rm -rf "gh/$p" || true
#             mkdir -p "gh/$(dirname "$p")" || true
#             cp -R "hf-src/$p" "gh/$p" 2>/dev/null || true
#           done < include.txt
#           cd gh
#           git add -A
#           if ! git diff --cached --quiet; then
#             git commit -m "HF selective sync: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
#             git push origin HEAD
#           else
#             echo "No changes"
#           fi

